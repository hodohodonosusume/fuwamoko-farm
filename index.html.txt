<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>È£õ„ÅπÔºÅ„Ç∑„Éû„Ç®„Éä„Ç¨ÔºÅ</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/matter-js@0.18.0/build/matter.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;700&display=swap');
        
        body {
            font-family: 'Noto Sans JP', sans-serif;
            overflow: hidden;
            user-select: none;
            -webkit-user-select: none;
            -webkit-touch-callout: none;
        }
        
        .game-canvas {
            border: 2px solid #4F46E5;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.3);
        }
        
        .shimaenaga {
            width: 40px;
            height: 30px;
            background: radial-gradient(circle, #ffffff 60%, #f0f0f0 100%);
            border-radius: 50% 30% 50% 30%;
            position: relative;
        }
        
        .shimaenaga::before {
            content: '';
            position: absolute;
            width: 8px;
            height: 15px;
            background: #333;
            border-radius: 50%;
            top: 8px;
            left: 8px;
        }
        
        .control-btn {
            transition: all 0.2s ease;
            touch-action: manipulation;
        }
        
        .control-btn:active {
            transform: scale(0.95);
            box-shadow: 0 2px 10px rgba(0,0,0,0.4);
        }
        
        .floating-animation {
            animation: float 2s ease-in-out infinite;
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }
        
        .pulse-glow {
            animation: pulse-glow 1.5s ease-in-out infinite;
        }
        
        @keyframes pulse-glow {
            0%, 100% { box-shadow: 0 0 20px rgba(34, 197, 94, 0.4); }
            50% { box-shadow: 0 0 40px rgba(34, 197, 94, 0.8); }
        }
        
        .coin-animation {
            animation: spin 2s linear infinite;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        .upgrade-bar {
            background: linear-gradient(90deg, #10B981 0%, #34D399 100%);
            height: 10px;
            border-radius: 5px;
            transition: width 0.3s ease;
        }
        
        .modal-overlay {
            backdrop-filter: blur(5px);
        }
        
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .game-ui {
            position: absolute;
            pointer-events: none;
        }
        
        .game-ui button {
            pointer-events: all;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500 min-h-screen">
    <!-- „Éõ„Éº„É†ÁîªÈù¢ -->
    <div id="homeScreen" class="min-h-screen flex flex-col items-center justify-center p-4">
        <div class="text-center mb-8">
            <h1 class="text-6xl font-bold text-white mb-4 floating-animation">
                üê¶ È£õ„ÅπÔºÅ„Ç∑„Éû„Ç®„Éä„Ç¨ÔºÅ
            </h1>
            <p class="text-xl text-white opacity-90">ÈáçÂøÉ„Éê„É©„É≥„Çπ„ÅßÁ©∫„ÇíÁøî„Åë„ÇçÔºÅ</p>
        </div>
        
        <div class="bg-white bg-opacity-90 rounded-2xl p-8 shadow-2xl max-w-md w-full">
            <div class="text-center mb-6">
                <div class="text-6xl mb-4">üê¶</div>
                <h2 class="text-2xl font-bold text-gray-800 mb-2">ÁèæÂú®„ÅÆ„Çπ„ÉÜ„Éº„Ç∏</h2>
                <p class="text-lg text-purple-600" id="currentStageDisplay">„Çπ„ÉÜ„Éº„Ç∏ 1 (300m)</p>
            </div>
            
            <div class="space-y-4">
                <button onclick="startGame()" class="w-full bg-gradient-to-r from-green-400 to-blue-500 text-white py-4 px-6 rounded-xl text-xl font-bold hover:shadow-lg transition-all pulse-glow">
                    <i class="fas fa-play mr-2"></i>„Ç≤„Éº„É†„Çπ„Çø„Éº„Éà
                </button>
                
                <button onclick="showUpgrades()" class="w-full bg-gradient-to-r from-yellow-400 to-orange-500 text-white py-3 px-6 rounded-xl text-lg font-bold hover:shadow-lg transition-all">
                    <i class="fas fa-arrow-up mr-2"></i>„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
                </button>
                
                <button onclick="showStages()" class="w-full bg-gradient-to-r from-purple-400 to-pink-500 text-white py-3 px-6 rounded-xl text-lg font-bold hover:shadow-lg transition-all">
                    <i class="fas fa-map mr-2"></i>„Çπ„ÉÜ„Éº„Ç∏ÈÅ∏Êäû
                </button>
            </div>
            
            <div class="mt-6 text-center">
                <p class="text-lg font-bold text-gray-700">
                    <i class="fas fa-coins text-yellow-500 mr-2"></i>
                    <span id="totalCoins">0</span> „Ç≥„Ç§„É≥
                </p>
            </div>
        </div>
    </div>

    <!-- „Ç≤„Éº„É†ÁîªÈù¢ -->
    <div id="gameScreen" class="hidden min-h-screen relative">
        <canvas id="gameCanvas" class="w-full h-screen bg-gradient-to-b from-blue-200 to-green-200"></canvas>
        
        <!-- „Ç≤„Éº„É†UI -->
        <div class="game-ui top-4 left-4 text-white">
            <div class="bg-black bg-opacity-50 rounded-lg p-3">
                <p class="text-lg font-bold">Ë∑ùÈõ¢: <span id="distance">0</span>m</p>
                <p class="text-sm">ÁõÆÊ®ô: <span id="targetDistance">300</span>m</p>
                <p class="text-sm">„Ç≥„Ç§„É≥: <span id="gameCoins">0</span></p>
            </div>
        </div>
        
        <!-- Êìç‰Ωú„Éú„Çø„É≥ -->
        <div class="game-ui bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-4">
            <button id="forwardBtn" class="control-btn bg-red-500 text-white px-8 py-4 rounded-xl text-lg font-bold shadow-lg">
                <i class="fas fa-arrow-down mr-2"></i>ÂâçÈáçÂøÉ
            </button>
            <button id="backwardBtn" class="control-btn bg-blue-500 text-white px-8 py-4 rounded-xl text-lg font-bold shadow-lg">
                <i class="fas fa-arrow-up mr-2"></i>ÂæåÈáçÂøÉ
            </button>
        </div>
        
        <!-- „Éñ„Éº„Çπ„Çø„ÉºË°®Á§∫ -->
        <div class="game-ui top-4 right-4">
            <div id="boosterDisplay" class="hidden bg-green-500 text-white px-4 py-2 rounded-lg font-bold">
                <i class="fas fa-rocket mr-2"></i>„Éñ„Éº„Çπ„Çø„Éº‰∏≠ÔºÅ
            </div>
        </div>
    </div>

    <!-- ÁµêÊûúÁîªÈù¢ -->
    <div id="resultScreen" class="hidden min-h-screen flex items-center justify-center p-4">
        <div class="bg-white rounded-2xl p-8 shadow-2xl max-w-md w-full text-center">
            <h2 class="text-3xl font-bold text-gray-800 mb-6">ÁµêÊûúÁô∫Ë°®ÔºÅ</h2>
            
            <div class="mb-6">
                <div class="text-6xl mb-4" id="resultEmoji">üéâ</div>
                <p class="text-2xl font-bold text-purple-600 mb-2">È£õË°åË∑ùÈõ¢</p>
                <p class="text-4xl font-bold text-gray-800" id="finalDistance">0m</p>
            </div>
            
            <div class="mb-6">
                <p class="text-lg text-gray-600 mb-2">Áç≤Âæó„Ç≥„Ç§„É≥</p>
                <p class="text-2xl font-bold text-yellow-600">
                    <i class="fas fa-coins mr-2"></i><span id="earnedCoins">0</span>
                </p>
            </div>
            
            <div id="stageClearMessage" class="hidden mb-6 p-4 bg-green-100 rounded-lg">
                <p class="text-lg font-bold text-green-800">üéä „Çπ„ÉÜ„Éº„Ç∏„ÇØ„É™„Ç¢ÔºÅ üéä</p>
                <p class="text-sm text-green-600">Ê¨°„ÅÆ„Çπ„ÉÜ„Éº„Ç∏„ÅåËß£Êîæ„Åï„Çå„Åæ„Åó„ÅüÔºÅ</p>
            </div>
            
            <div class="space-y-3">
                <button onclick="doubleCoins()" class="w-full bg-gradient-to-r from-yellow-400 to-orange-500 text-white py-3 px-6 rounded-xl font-bold hover:shadow-lg transition-all">
                    <i class="fas fa-video mr-2"></i>Â∫ÉÂëä„Åß„Ç≥„Ç§„É≥2ÂÄçÔºÅ
                </button>
                
                <button onclick="restartGame()" class="w-full bg-gradient-to-r from-green-400 to-blue-500 text-white py-3 px-6 rounded-xl font-bold hover:shadow-lg transition-all">
                    <i class="fas fa-redo mr-2"></i>„ÇÇ„ÅÜ‰∏ÄÂ∫¶È£õ„Å∂
                </button>
                
                <button onclick="goHome()" class="w-full bg-gray-500 text-white py-3 px-6 rounded-xl font-bold hover:shadow-lg transition-all">
                    <i class="fas fa-home mr-2"></i>„Éõ„Éº„É†„Å´Êàª„Çã
                </button>
            </div>
        </div>
    </div>

    <!-- „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„ÉâÁîªÈù¢ -->
    <div id="upgradeScreen" class="hidden min-h-screen p-4 overflow-y-auto">
        <div class="max-w-2xl mx-auto">
            <div class="text-center mb-8">
                <h2 class="text-4xl font-bold text-white mb-4">
                    <i class="fas fa-arrow-up mr-2"></i>„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
                </h2>
                <p class="text-xl text-white opacity-90">
                    „Ç≥„Ç§„É≥: <span id="upgradeCoins" class="font-bold">0</span>
                </p>
            </div>
            
            <div class="grid gap-6">
                <!-- Áô∫Â∞ÑÂàùÈÄü -->
                <div class="bg-white bg-opacity-90 rounded-xl p-6">
                    <div class="flex items-center justify-between mb-4">
                        <div>
                            <h3 class="text-xl font-bold text-gray-800">üöÄ Áô∫Â∞ÑÂàùÈÄü</h3>
                            <p class="text-gray-600">ÂàùÊúü„Çπ„Éî„Éº„Éâ„ÇíÂº∑Âåñ</p>
                        </div>
                        <div class="text-right">
                            <p class="text-lg font-bold text-purple-600">Lv.<span id="speedLevel">1</span></p>
                            <p class="text-sm text-gray-600">„Ç≥„Çπ„Éà: <span id="speedCost">50</span></p>
                        </div>
                    </div>
                    <div class="bg-gray-200 rounded-full h-3 mb-4">
                        <div class="upgrade-bar" id="speedBar" style="width: 20%"></div>
                    </div>
                    <button onclick="upgradeSpeed()" id="speedUpgradeBtn" class="w-full bg-purple-500 text-white py-2 px-4 rounded-lg font-bold hover:bg-purple-600 transition-all">
                        „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
                    </button>
                </div>
                
                <!-- ÊªûÁ©∫Âäõ -->
                <div class="bg-white bg-opacity-90 rounded-xl p-6">
                    <div class="flex items-center justify-between mb-4">
                        <div>
                            <h3 class="text-xl font-bold text-gray-800">ü™∂ ÊªûÁ©∫Âäõ</h3>
                            <p class="text-gray-600">Á©∫Ê∞óÊäµÊäó„ÇíËªΩÊ∏õ</p>
                        </div>
                        <div class="text-right">
                            <p class="text-lg font-bold text-blue-600">Lv.<span id="floatLevel">1</span></p>
                            <p class="text-sm text-gray-600">„Ç≥„Çπ„Éà: <span id="floatCost">75</span></p>
                        </div>
                    </div>
                    <div class="bg-gray-200 rounded-full h-3 mb-4">
                        <div class="upgrade-bar bg-blue-500" id="floatBar" style="width: 20%"></div>
                    </div>
                    <button onclick="upgradeFloat()" id="floatUpgradeBtn" class="w-full bg-blue-500 text-white py-2 px-4 rounded-lg font-bold hover:bg-blue-600 transition-all">
                        „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
                    </button>
                </div>
                
                <!-- „Ç¢„Ç§„ÉÜ„É†ÂäπÊûúÊôÇÈñì -->
                <div class="bg-white bg-opacity-90 rounded-xl p-6">
                    <div class="flex items-center justify-between mb-4">
                        <div>
                            <h3 class="text-xl font-bold text-gray-800">‚è∞ „Ç¢„Ç§„ÉÜ„É†ÂäπÊûúÊôÇÈñì</h3>
                            <p class="text-gray-600">„Éñ„Éº„Çπ„Çø„ÉºÂäπÊûú„ÇíÂª∂Èï∑</p>
                        </div>
                        <div class="text-right">
                            <p class="text-lg font-bold text-green-600">Lv.<span id="durationLevel">1</span></p>
                            <p class="text-sm text-gray-600">„Ç≥„Çπ„Éà: <span id="durationCost">100</span></p>
                        </div>
                    </div>
                    <div class="bg-gray-200 rounded-full h-3 mb-4">
                        <div class="upgrade-bar bg-green-500" id="durationBar" style="width: 20%"></div>
                    </div>
                    <button onclick="upgradeDuration()" id="durationUpgradeBtn" class="w-full bg-green-500 text-white py-2 px-4 rounded-lg font-bold hover:bg-green-600 transition-all">
                        „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
                    </button>
                </div>
                
                <!-- Á£ÅÂäõ -->
                <div class="bg-white bg-opacity-90 rounded-xl p-6">
                    <div class="flex items-center justify-between mb-4">
                        <div>
                            <h3 class="text-xl font-bold text-gray-800">üß≤ Á£ÅÂäõ</h3>
                            <p class="text-gray-600">„Ç≥„Ç§„É≥Âê∏ÂèéÁØÑÂõ≤Êã°Â§ß</p>
                        </div>
                        <div class="text-right">
                            <p class="text-lg font-bold text-orange-600">Lv.<span id="magnetLevel">1</span></p>
                            <p class="text-sm text-gray-600">„Ç≥„Çπ„Éà: <span id="magnetCost">125</span></p>
                        </div>
                    </div>
                    <div class="bg-gray-200 rounded-full h-3 mb-4">
                        <div class="upgrade-bar bg-orange-500" id="magnetBar" style="width: 20%"></div>
                    </div>
                    <button onclick="upgradeMagnet()" id="magnetUpgradeBtn" class="w-full bg-orange-500 text-white py-2 px-4 rounded-lg font-bold hover:bg-orange-600 transition-all">
                        „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
                    </button>
                </div>
            </div>
            
            <div class="text-center mt-8">
                <button onclick="goHome()" class="bg-gray-600 text-white py-3 px-8 rounded-xl text-lg font-bold hover:shadow-lg transition-all">
                    <i class="fas fa-arrow-left mr-2"></i>Êàª„Çã
                </button>
            </div>
        </div>
    </div>

    <!-- „Çπ„ÉÜ„Éº„Ç∏ÈÅ∏ÊäûÁîªÈù¢ -->
    <div id="stageScreen" class="hidden min-h-screen p-4 overflow-y-auto">
        <div class="max-w-4xl mx-auto">
            <div class="text-center mb-8">
                <h2 class="text-4xl font-bold text-white mb-4">
                    <i class="fas fa-map mr-2"></i>„Çπ„ÉÜ„Éº„Ç∏ÈÅ∏Êäû
                </h2>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="stageGrid">
                <!-- „Çπ„ÉÜ„Éº„Ç∏„ÅåÂãïÁöÑ„Å´ÁîüÊàê„Åï„Çå„Çã -->
            </div>
            
            <div class="text-center mt-8">
                <button onclick="goHome()" class="bg-gray-600 text-white py-3 px-8 rounded-xl text-lg font-bold hover:shadow-lg transition-all">
                    <i class="fas fa-arrow-left mr-2"></i>Êàª„Çã
                </button>
            </div>
        </div>
    </div>

    <script>
        // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
        let engine, world, bird, canvas, ctx;
        let gameState = 'home';
        let distance = 0;
        let coins = 0;
        let gameCoins = 0;
        let isBoosterActive = false;
        let boosterEndTime = 0;
        let cameraX = 0;
        let items = [];
        let particles = [];
        
        // „Ç≤„Éº„É†„Éá„Éº„Çø
        let gameData = {
            totalCoins: 0,
            currentStage: 1,
            unlockedStages: 1,
            upgrades: {
                speed: { level: 1, cost: 50 },
                float: { level: 1, cost: 75 },
                duration: { level: 1, cost: 100 },
                magnet: { level: 1, cost: 125 }
            }
        };
        
        // „Çπ„ÉÜ„Éº„Ç∏Ë®≠ÂÆö
        const stages = [
            { id: 1, name: "Èùí„ÅÑÁ©∫", target: 300, background: "#87CEEB" },
            { id: 2, name: "Â§ïÁÑº„ÅëÁ©∫", target: 600, background: "#FFA07A" },
            { id: 3, name: "ÊòüÁ©∫", target: 1000, background: "#191970" },
            { id: 4, name: "„Ç™„Éº„É≠„É©", target: 1500, background: "#00FF7F" },
            { id: 5, name: "ÂÆáÂÆô", target: 2500, background: "#000000" }
        ];
        
        // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        function loadGameData() {
            const saved = localStorage.getItem('shimaenagaGameData');
            if (saved) {
                gameData = { ...gameData, ...JSON.parse(saved) };
            }
            updateUI();
        }
        
        // „Ç≤„Éº„É†„Éá„Éº„Çø‰øùÂ≠ò
        function saveGameData() {
            localStorage.setItem('shimaenagaGameData', JSON.stringify(gameData));
        }
        
        // UIÊõ¥Êñ∞
        function updateUI() {
            document.getElementById('totalCoins').textContent = gameData.totalCoins;
            document.getElementById('upgradeCoins').textContent = gameData.totalCoins;
            document.getElementById('currentStageDisplay').textContent = 
                `„Çπ„ÉÜ„Éº„Ç∏ ${gameData.currentStage} (${stages[gameData.currentStage - 1].target}m)`;
            
            // „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„ÉâË°®Á§∫Êõ¥Êñ∞
            updateUpgradeDisplay();
            updateStageDisplay();
        }
        
        // „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„ÉâË°®Á§∫Êõ¥Êñ∞
        function updateUpgradeDisplay() {
            const upgrades = gameData.upgrades;
            
            // Áô∫Â∞ÑÂàùÈÄü
            document.getElementById('speedLevel').textContent = upgrades.speed.level;
            document.getElementById('speedCost').textContent = upgrades.speed.cost;
            document.getElementById('speedBar').style.width = `${Math.min(upgrades.speed.level * 20, 100)}%`;
            document.getElementById('speedUpgradeBtn').disabled = gameData.totalCoins < upgrades.speed.cost;
            
            // ÊªûÁ©∫Âäõ
            document.getElementById('floatLevel').textContent = upgrades.float.level;
            document.getElementById('floatCost').textContent = upgrades.float.cost;
            document.getElementById('floatBar').style.width = `${Math.min(upgrades.float.level * 20, 100)}%`;
            document.getElementById('floatUpgradeBtn').disabled = gameData.totalCoins < upgrades.float.cost;
            
            // „Ç¢„Ç§„ÉÜ„É†ÂäπÊûúÊôÇÈñì
            document.getElementById('durationLevel').textContent = upgrades.duration.level;
            document.getElementById('durationCost').textContent = upgrades.duration.cost;
            document.getElementById('durationBar').style.width = `${Math.min(upgrades.duration.level * 20, 100)}%`;
            document.getElementById('durationUpgradeBtn').disabled = gameData.totalCoins < upgrades.duration.cost;
            
            // Á£ÅÂäõ
            document.getElementById('magnetLevel').textContent = upgrades.magnet.level;
            document.getElementById('magnetCost').textContent = upgrades.magnet.cost;
            document.getElementById('magnetBar').style.width = `${Math.min(upgrades.magnet.level * 20, 100)}%`;
            document.getElementById('magnetUpgradeBtn').disabled = gameData.totalCoins < upgrades.magnet.cost;
        }
        
        // „Çπ„ÉÜ„Éº„Ç∏Ë°®Á§∫Êõ¥Êñ∞
        function updateStageDisplay() {
            const grid = document.getElementById('stageGrid');
            grid.innerHTML = '';
            
            stages.forEach((stage, index) => {
                const isUnlocked = stage.id <= gameData.unlockedStages;
                const isCurrent = stage.id === gameData.currentStage;
                
                const stageDiv = document.createElement('div');
                stageDiv.className = `bg-white bg-opacity-90 rounded-xl p-6 text-center transition-all hover:shadow-lg ${
                    isUnlocked ? 'cursor-pointer' : 'opacity-50'
                } ${isCurrent ? 'ring-4 ring-purple-500' : ''}`;
                
                stageDiv.innerHTML = `
                    <div class="text-4xl mb-2">${isUnlocked ? 'üåü' : 'üîí'}</div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">„Çπ„ÉÜ„Éº„Ç∏ ${stage.id}</h3>
                    <p class="text-gray-600 mb-2">${stage.name}</p>
                    <p class="text-lg font-bold text-purple-600">ÁõÆÊ®ô: ${stage.target}m</p>
                    ${isCurrent ? '<p class="text-sm text-purple-600 mt-2">ÁèæÂú®„ÅÆ„Çπ„ÉÜ„Éº„Ç∏</p>' : ''}
                `;
                
                if (isUnlocked) {
                    stageDiv.onclick = () => selectStage(stage.id);
                }
                
                grid.appendChild(stageDiv);
            });
        }
        
        // „Çπ„ÉÜ„Éº„Ç∏ÈÅ∏Êäû
        function selectStage(stageId) {
            gameData.currentStage = stageId;
            saveGameData();
            updateUI();
            goHome();
        }
        
        // ÁîªÈù¢ÈÅ∑Áßª
        function showScreen(screenName) {
            const screens = ['homeScreen', 'gameScreen', 'resultScreen', 'upgradeScreen', 'stageScreen'];
            screens.forEach(screen => {
                document.getElementById(screen).classList.add('hidden');
            });
            document.getElementById(screenName).classList.remove('hidden');
        }
        
        function goHome() {
            showScreen('homeScreen');
            gameState = 'home';
        }
        
        function showUpgrades() {
            showScreen('upgradeScreen');
            updateUpgradeDisplay();
        }
        
        function showStages() {
            showScreen('stageScreen');
            updateStageDisplay();
        }
        
        // „Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„ÉâÊ©üËÉΩ
        function upgradeSpeed() {
            const upgrade = gameData.upgrades.speed;
            if (gameData.totalCoins >= upgrade.cost) {
                gameData.totalCoins -= upgrade.cost;
                upgrade.level++;
                upgrade.cost = Math.floor(upgrade.cost * 1.5);
                saveGameData();
                updateUpgradeDisplay();
            }
        }
        
        function upgradeFloat() {
            const upgrade = gameData.upgrades.float;
            if (gameData.totalCoins >= upgrade.cost) {
                gameData.totalCoins -= upgrade.cost;
                upgrade.level++;
                upgrade.cost = Math.floor(upgrade.cost * 1.5);
                saveGameData();
                updateUpgradeDisplay();
            }
        }
        
        function upgradeDuration() {
            const upgrade = gameData.upgrades.duration;
            if (gameData.totalCoins >= upgrade.cost) {
                gameData.totalCoins -= upgrade.cost;
                upgrade.level++;
                upgrade.cost = Math.floor(upgrade.cost * 1.5);
                saveGameData();
                updateUpgradeDisplay();
            }
        }
        
        function upgradeMagnet() {
            const upgrade = gameData.upgrades.magnet;
            if (gameData.totalCoins >= upgrade.cost) {
                gameData.totalCoins -= upgrade.cost;
                upgrade.level++;
                upgrade.cost = Math.floor(upgrade.cost * 1.5);
                saveGameData();
                updateUpgradeDisplay();
            }
        }
        
        // „Ç≤„Éº„É†ÈñãÂßã
        function startGame() {
            showScreen('gameScreen');
            gameState = 'playing';
            initGame();
        }
        
        // „Ç≤„Éº„É†ÂàùÊúüÂåñ
        function initGame() {
            canvas = document.getElementById('gameCanvas');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            ctx = canvas.getContext('2d');
            
            // Matter.js „Ç®„É≥„Ç∏„É≥ÂàùÊúüÂåñ
            engine = Matter.Engine.create();
            world = engine.world;
            engine.world.gravity.y = 0.8;
            
            // „Ç∑„Éû„Ç®„Éä„Ç¨‰ΩúÊàê
            const startSpeed = 10 + (gameData.upgrades.speed.level - 1) * 2;
            bird = Matter.Bodies.circle(200, canvas.height / 2, 20, {
                restitution: 0.3,
                frictionAir: 0.01 - (gameData.upgrades.float.level - 1) * 0.002,
                render: { fillStyle: '#ffffff' }
            });
            
            Matter.Body.setVelocity(bird, { x: startSpeed, y: -5 });
            Matter.World.add(world, bird);
            
            // Âú∞Èù¢‰ΩúÊàê
            const ground = Matter.Bodies.rectangle(canvas.width / 2, canvas.height + 50, canvas.width * 10, 100, {
                isStatic: true,
                render: { fillStyle: '#8B4513' }
            });
            Matter.World.add(world, ground);
            
            // „Ç≤„Éº„É†Â§âÊï∞„É™„Çª„ÉÉ„Éà
            distance = 0;
            gameCoins = 0;
            cameraX = 0;
            items = [];
            particles = [];
            isBoosterActive = false;
            
            // „Ç¢„Ç§„ÉÜ„É†ÁîüÊàê
            generateItems();
            
            // „Ç≤„Éº„É†„É´„Éº„ÉóÈñãÂßã
            requestAnimationFrame(gameLoop);
            
            // „Ç≥„É≥„Éà„É≠„Éº„É´Ë®≠ÂÆö
            setupControls();
        }
        
        // „Ç¢„Ç§„ÉÜ„É†ÁîüÊàê
        function generateItems() {
            const currentStage = stages[gameData.currentStage - 1];
            const targetDistance = currentStage.target;
            
            for (let i = 0; i < targetDistance / 50; i++) {
                const x = 400 + i * 100 + Math.random() * 200;
                const y = 100 + Math.random() * (canvas.height - 300);
                
                const itemType = Math.random();
                let type, color, effect;
                
                if (itemType < 0.6) {
                    type = 'coin';
                    color = '#FFD700';
                    effect = '„Ç≥„Ç§„É≥+1';
                } else if (itemType < 0.8) {
                    type = 'booster';
                    color = '#FF6B6B';
                    effect = '„Çπ„Éî„Éº„Éâ„Éñ„Éº„Çπ„Éà';
                } else if (itemType < 0.95) {
                    type = 'float';
                    color = '#4ECDC4';
                    effect = 'ÊµÆÈÅäÂäõ„Ç¢„ÉÉ„Éó';
                } else {
                    type = 'barrier';
                    color = '#9B59B6';
                    effect = '„Éê„É™„Ç¢';
                }
                
                items.push({ x, y, type, color, effect, collected: false });
            }
        }
        
        // „Ç≥„É≥„Éà„É≠„Éº„É´Ë®≠ÂÆö
        function setupControls() {
            const forwardBtn = document.getElementById('forwardBtn');
            const backwardBtn = document.getElementById('backwardBtn');
            
            forwardBtn.ontouchstart = forwardBtn.onmousedown = () => {
                Matter.Body.applyForce(bird, bird.position, { x: 0.002, y: 0.001 });
            };
            
            backwardBtn.ontouchstart = backwardBtn.onmousedown = () => {
                Matter.Body.applyForce(bird, bird.position, { x: -0.001, y: -0.002 });
            };
        }
        
        // „Ç≤„Éº„É†„É´„Éº„Éó
        function gameLoop() {
            if (gameState !== 'playing') return;
            
            Matter.Engine.update(engine);
            
            // „Ç´„É°„É©ËøΩÂæì
            cameraX = bird.position.x - canvas.width / 3;
            
            // Ë∑ùÈõ¢Ë®àÁÆó
            distance = Math.max(0, Math.floor(bird.position.x / 10));
            
            // „Éñ„Éº„Çπ„Çø„ÉºÂäπÊûú„ÉÅ„Çß„ÉÉ„ÇØ
            if (isBoosterActive && Date.now() > boosterEndTime) {
                isBoosterActive = false;
                document.getElementById('boosterDisplay').classList.add('hidden');
                engine.world.gravity.y = 0.8;
            }
            
            // „Ç¢„Ç§„ÉÜ„É†ÂèéÈõÜ„ÉÅ„Çß„ÉÉ„ÇØ
            checkItemCollection();
            
            // ÊèèÁîª
            drawGame();
            
            // UIÊõ¥Êñ∞
            document.getElementById('distance').textContent = distance;
            document.getElementById('gameCoins').textContent = gameCoins;
            document.getElementById('targetDistance').textContent = stages[gameData.currentStage - 1].target;
            
            // „Ç≤„Éº„É†ÁµÇ‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ
            if (bird.position.y > canvas.height - 100) {
                endGame();
                return;
            }
            
            requestAnimationFrame(gameLoop);
        }
        
        // „Ç¢„Ç§„ÉÜ„É†ÂèéÈõÜ„ÉÅ„Çß„ÉÉ„ÇØ
        function checkItemCollection() {
            const magnetRange = 50 + (gameData.upgrades.magnet.level - 1) * 20;
            
            items.forEach(item => {
                if (item.collected) return;
                
                const dist = Math.sqrt(
                    Math.pow(bird.position.x - item.x, 2) + 
                    Math.pow(bird.position.y - item.y, 2)
                );
                
                if (dist < magnetRange) {
                    item.collected = true;
                    collectItem(item);
                    createParticles(item.x, item.y, item.color);
                }
            });
        }
        
        // „Ç¢„Ç§„ÉÜ„É†ÂäπÊûúÈÅ©Áî®
        function collectItem(item) {
            const duration = 3000 + (gameData.upgrades.duration.level - 1) * 1000;
            
            switch (item.type) {
                case 'coin':
                    gameCoins++;
                    break;
                case 'booster':
                    isBoosterActive = true;
                    boosterEndTime = Date.now() + duration;
                    Matter.Body.applyForce(bird, bird.position, { x: 0.01, y: -0.005 });
                    document.getElementById('boosterDisplay').classList.remove('hidden');
                    break;
                case 'float':
                    engine.world.gravity.y = 0.4;
                    setTimeout(() => { engine.world.gravity.y = 0.8; }, duration);
                    break;
                case 'barrier':
                    // „Éê„É™„Ç¢ÂäπÊûúÔºàÂÆüË£ÖÁ∞°Áï•ÂåñÔºâ
                    break;
            }
        }
        
        // „Éë„Éº„ÉÜ„Ç£„ÇØ„É´ÁîüÊàê
        function createParticles(x, y, color) {
            for (let i = 0; i < 10; i++) {
                particles.push({
                    x: x + (Math.random() - 0.5) * 20,
                    y: y + (Math.random() - 0.5) * 20,
                    vx: (Math.random() - 0.5) * 5,
                    vy: (Math.random() - 0.5) * 5,
                    color: color,
                    life: 30
                });
            }
        }
        
        // ÊèèÁîª
        function drawGame() {
            const currentStage = stages[gameData.currentStage - 1];
            
            // ËÉåÊôØ
            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
            gradient.addColorStop(0, currentStage.background);
            gradient.addColorStop(1, '#90EE90');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // „Ç´„É°„É©Â§âÊèõÈÅ©Áî®
            ctx.save();
            ctx.translate(-cameraX, 0);
            
            // „Ç∑„Éû„Ç®„Éä„Ç¨ÊèèÁîª
            ctx.save();
            ctx.translate(bird.position.x, bird.position.y);
            ctx.rotate(bird.angle);
            
            // ‰Ωì
            ctx.fillStyle = '#ffffff';
            ctx.beginPath();
            ctx.ellipse(0, 0, 20, 15, 0, 0, Math.PI * 2);
            ctx.fill();
            
            // ÁõÆ
            ctx.fillStyle = '#000000';
            ctx.beginPath();
            ctx.ellipse(-8, -5, 3, 3, 0, 0, Math.PI * 2);
            ctx.fill();
            
            // „Åè„Å°„Å∞„Åó
            ctx.fillStyle = '#FFA500';
            ctx.beginPath();
            ctx.ellipse(-18, 0, 4, 2, 0, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.restore();
            
            // „Ç¢„Ç§„ÉÜ„É†ÊèèÁîª
            items.forEach(item => {
                if (item.collected) return;
                
                ctx.fillStyle = item.color;
                ctx.shadowBlur = 10;
                ctx.shadowColor = item.color;
                
                if (item.type === 'coin') {
                    ctx.beginPath();
                    ctx.ellipse(item.x, item.y, 8, 8, Date.now() * 0.01, 0, Math.PI * 2);
                    ctx.fill();
                } else {
                    ctx.fillRect(item.x - 10, item.y - 10, 20, 20);
                }
                
                ctx.shadowBlur = 0;
            });
            
            // „Éë„Éº„ÉÜ„Ç£„ÇØ„É´ÊèèÁîª
            particles = particles.filter(particle => {
                particle.x += particle.vx;
                particle.y += particle.vy;
                particle.life--;
                
                if (particle.life > 0) {
                    ctx.fillStyle = particle.color;
                    ctx.globalAlpha = particle.life / 30;
                    ctx.fillRect(particle.x, particle.y, 4, 4);
                    ctx.globalAlpha = 1;
                    return true;
                }
                return false;
            });
            
            // Âú∞Èù¢ÊèèÁîª
            ctx.fillStyle = '#8B4513';
            ctx.fillRect(-1000, canvas.height - 100, canvas.width * 10, 200);
            
            ctx.restore();
        }
        
        // „Ç≤„Éº„É†ÁµÇ‰∫Ü
        function endGame() {
            gameState = 'ended';
            
            // „Ç≥„Ç§„É≥Âä†ÁÆó
            gameData.totalCoins += gameCoins;
            
            // „Çπ„ÉÜ„Éº„Ç∏„ÇØ„É™„Ç¢„ÉÅ„Çß„ÉÉ„ÇØ
            const currentStage = stages[gameData.currentStage - 1];
            const stageClear = distance >= currentStage.target;
            
            if (stageClear && gameData.currentStage === gameData.unlockedStages) {
                gameData.unlockedStages = Math.min(stages.length, gameData.unlockedStages + 1);
            }
            
            saveGameData();
            showResult(stageClear);
        }
        
        // ÁµêÊûúË°®Á§∫
        function showResult(stageClear) {
            showScreen('resultScreen');
            
            document.getElementById('finalDistance').textContent = distance + 'm';
            document.getElementById('earnedCoins').textContent = gameCoins;
            
            if (stageClear) {
                document.getElementById('resultEmoji').textContent = 'üéâ';
                document.getElementById('stageClearMessage').classList.remove('hidden');
            } else {
                document.getElementById('resultEmoji').textContent = 'üòä';
                document.getElementById('stageClearMessage').classList.add('hidden');
            }
        }
        
        // „Ç≥„Ç§„É≥2ÂÄç
        function doubleCoins() {
            gameData.totalCoins += gameCoins;
            saveGameData();
            updateUI();
            
            // Â∫ÉÂëäË¶ñËÅ¥„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
            alert('Â∫ÉÂëä„ÇíË¶ñËÅ¥„Åó„Åæ„Åó„ÅüÔºÅ„Ç≥„Ç§„É≥„Åå2ÂÄç„Å´„Å™„Çä„Åæ„Åó„ÅüÔºÅ');
            document.getElementById('earnedCoins').textContent = gameCoins * 2;
        }
        
        // „É™„Çπ„Çø„Éº„Éà
        function restartGame() {
            startGame();
        }
        
        // ÂàùÊúüÂåñ
        window.addEventListener('load', () => {
            loadGameData();
            
            // „É™„Çµ„Ç§„Ç∫ÂØæÂøú
            window.addEventListener('resize', () => {
                if (gameState === 'playing') {
                    const canvas = document.getElementById('gameCanvas');
                    canvas.width = window.innerWidth;
                    canvas.height = window.innerHeight;
                }
            });
            
            // „Çø„ÉÉ„ÉÅÊìç‰ΩúÈò≤Ê≠¢
            document.addEventListener('touchstart', e => e.preventDefault(), { passive: false });
            document.addEventListener('touchmove', e => e.preventDefault(), { passive: false });
        });
    </script>
</body>
</html>